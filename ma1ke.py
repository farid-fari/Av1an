#!/usr/bin/env python

import argparse
from commands import (
    GetAudio, SplitFile, PasteFiles, All, Prepare, Clean, HEVCEncodeFile,
    FrameCount, MatchEncodedFrames, MatchOutputFrames, SVTEncodeFile)
import os
import tempfile
from warnings import warn


def sceneDetect(inFile, scenesFile):
    try:
        with open(scenesFile) as f:
            return f.read().strip().split(',')
    except FileNotFoundError:
        from scenedetect.video_manager import VideoManager
        from scenedetect.stats_manager import StatsManager
        from scenedetect.scene_manager import SceneManager
        from scenedetect.detectors import ContentDetector

    videoManager = VideoManager([inFile])
    statsManager = StatsManager()
    sceneManager = SceneManager(statsManager)
    sceneManager.add_detector(ContentDetector())
    baseTimecode = videoManager.get_base_timecode()

    videoManager.start()
    sceneManager.detect_scenes(frame_source=videoManager)
    sceneList = sceneManager.get_scene_list(baseTimecode)

    splitList = [str(scene[0].get_frames()) for scene in sceneList][1:]

    with open(scenesFile, 'w') as f:
        print(','.join(splitList), file=f)

    return splitList


def main():
    parser = argparse.ArgumentParser(
        description="A simple AV1/HEVC encoding tool.")
    parser.add_argument('input', help='File to encode.')
    parser.add_argument('--tempdir', help='directory in which to work\
(default: randomly generated)')
    parser.add_argument('-o', '--output', default="output.mkv",
                        help='final encode output file (default: output.mkv)')
    parser.add_argument(
        '-e', '--encoder', default='av1', choices=['av1', 'hevc'],
        help='encoder to use (default: av1)')
    parser.add_argument('-m', '--makefile', default="Makefile",
                        help='makefile name to write to (default: Makefile)')
    parser.add_argument('--splits', default=None,
                        help='file containing the frames on which to split.\
 (default: [input].csv)')
    parser.add_argument('--nvidia', action='store_true',
                        help='use NVIDIA hardware acceleration (nvenc/dec)')
    parser.add_argument('--version', action='version', version='ma1ke v0.1')
    args = parser.parse_args()

    if not os.path.exists(args.input):
        warn("Your input file does not exist, you will have to"
             " create it before you run make.", category=RuntimeWarning)

    if not os.path.samefile(args.input, os.path.basename(args.input)):
        warn("Input file not in current directory.")
        print("All operations will take place in this directory.")
        print("It is recommended to move the file here.")

    if os.path.abspath(args.input) == os.path.abspath(args.output):
        warn("Output and input filenames refer to the same file.")

    if args.tempdir is None:
        dir = os.path.dirname(args.input)
        dir = dir if os.path.exists(dir) else './'
        args.tempdir = tempfile.mkdtemp(dir=dir)
        os.rmdir(args.tempdir)

    try:
        if os.listdir(args.tempdir):
            warn("Temporary directory not empty: files may be overwritten.")
    except FileNotFoundError:
        pass

    if args.splits is None:
        args.splits = args.input + ".csv"

    splits = sceneDetect(args.input, args.splits)

    commandList = [
        All(),
        Clean(),
        Prepare(splits),
        GetAudio(),
        SplitFile(splits),
        PasteFiles(splits),
        FrameCount("$(input)", "$(inframes)"),
        FrameCount("%.mkv", "%.fc"),
        MatchEncodedFrames(),
        MatchOutputFrames(), ]

    if args.encoder == 'hevc':
        commandList.append(HEVCEncodeFile())
    else:
        SVTEncodeFile()

    with open('Makefile', 'w') as fo:
        print("# Generated by ma1ke v0.1\n", file=fo)
        print(".SECONDARY:", file=fo)

        print(f"tempdir = {os.path.normpath(args.tempdir)}\n", file=fo)

        hardwareDec = ' -hwaccel nvdec' if args.nvidia else ''
        print("ffmpegcommand = ffmpeg -y -v 8{hardwareDec}", file=fo)
        print("svtexec = SvtAv1EncApp\n", file=fo)

        print(f"input = {os.path.normpath(args.input)}", file=fo)
        print(f"output = {os.path.normpath(args.output)}\n", file=fo)

        inframes = os.path.normpath(os.path.splitext(args.input)[0] + ".fc")
        print(f"inframes = {inframes}", file=fo)
        outframes = os.path.normpath(os.path.splitext(args.output)[0] + ".fc")
        print(f"outframes = {outframes}\n", file=fo)

        for command in commandList:
            print(command.makeCommand(), file=fo)


if __name__ == '__main__':
    main()
    print("Makefile written.")
